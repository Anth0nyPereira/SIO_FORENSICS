- Encontrei a "cena verde que salta", está numa pasta na VM, é um html que está na pasta /mnt/vm/var/www/html e tem o nome de index_pwn.html, abre num browser, se quiseres vais até ao diretório www pelo terminal e depois usa este comando: xdg-open html


Sequência de ataques:
--------------------------------------------------------------LOGIN------------------------------------------------------------------------
- ele tentou fazer login utilizando SQL Injection:
1º ele tentou colocar uma pelica no campo de usermail do login, e apareceu o seguinte erro:
DB Error, could not query the database
MySQL Error: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ''''' at line 1
Ora, isto significa que o campo de login é vulnerável a SQL Injection
Lembrar que pelicas delimitam as strings do query
O ero tem 5 pelicas seguidas, e podemos interpretar desta forma: existe um erro no sql porque tens ''' do campo do usermail, ou seja, início de string,
0 chars, fim de string, e início de string (sem fim); depois ainda tens mais 2 pelicas provenientes do campo da password, que é required!! 3 + 2 = 5 IZI
Podes verificar igualmente no ficheiro login.php, em que ele primeiro verifica na BD se existe um username igual ao usermail introduzido; como é natural,
não existe um username igual a vazio, por isso, logo aí já daria erro!!

2º ele tentou colocar isto ' -- // no campo do usermail, não deu erro de SQL Injection mas deu erro de "Invalid username, try again"
Neste caso, ele ao colocar um comentário vai anular a componente da password, pelo que é compreensível que o erro só se queixe do username.
Com esta pelica ele fechou o query do usermail, e basicamente ele recebeu como "input" 0 chars na mesma, mas e como também foi colocado comentário
e por isso o campo da password foi ignorado e o query do usermail foi "fechado", então não houve erro de SQL Syntax!! 
Ele queixou-se de username inválido! Eu diria que é porque obviamente nunca iria existir na base de dados um utilizador com nome "vazio", ou seja, 
o query acaba por retornar um valor lógico falso.
Acho estranho ele não estar a dar erro de DB Error, tendo em conta que na mesma ele está a procurar por um usermail igual a "vazio"!! Como no caso anterior.

3º ele colocou no usermail=' OR 1=1 -- // e conseguiu entrar na conta de admin, mesmo sem nenhuma passe
Tal como no exemplo anterior, ele comentou o campo da password, não me vou estar a repetir.
Para obter "dados", isto é, uma correpsondência de uma conta na base de dados, alguma parte na query tem de dar valor lógico verdadeiro obrigatoriamente!
Ora, nada melhor do que garantir uma disjunção com um literal/condição sempre verdadeira... apesar do usermail introduzido ser "vazio", a condição
"vazio" OR True vai dar True por isso HEY HEY ENTREI NO SISTEMA.

dúvida 1  - como é que ele conseguiu entrar, se ambos os campos são required?? -> bem, se a minha memória não me falha os campos de login no projeto
passado acho que não tinham estes campos com required, isto é, exigiam que fosse colocado algo em ambos os inputs. Ainda não descobri muito bem mas se
ele comenta o espaço da palavra-passe, a priori significa que o input da palavra-passe deixa de ter qualquer impacto porque é como se não existisse; relativamente
ao usermail, o atacante insere sempre alguma coisa no input do usermail, por isso nunca vai ser vazio e, por isso, nunca deverá aparecer erro de campo
a ser preenchido obrigatoriamente, penso eu.
Eu diria que basicamente, sempre que ele põe por exemplo apenas uma pelica ' ele acaba por procurar por um que seja igual a "vazio", mas como ele preencheu
o input ele deixa de estar vazio e, então, o required do input html não se queixa.

4º UI, acho que ele modificou a palavra-passe!!
Ele na tentativa anterior entrou na conta admin recorrendo a sql injection, e como podemos verificar pelo GET obtido, ele entrou na página onde 
podia criar um post ou mudar as credenciais de acesso; ora, neste POST é possível verificar que ele desta vez entrou com o mail real do admin mas
entrou com uma palavra-passe "típica" e "básica", "abc", por isso tudo indica que esta tenha sido mudada. Não seria difícil ao atacante descobrir o usermail~
real, pois este está exposto no servidor na página T&C.

5º POST 112 O atacante conseguiu entrar na conta de administrador utilizando o usermail real e com palavra-passe vazia :OOOOO
Estou um pouco na dúvida, mas eu diria que ele próprio voltou a mudar a palavra-passe para ser vazia, isto porquê:
 - se fosse apenas ele recorrer a SQL injection, ao colocar uma pelica significava que ele ia estar à procura de uma conta com palavra-passe "vazia", o que
é deveras impossível em condições ditas normais existir na base de dados uma conta com palavra-passe vazia... 
 - ele também não iria conseguir aceder à conta ao colocar na palavra-passe apenas uma pelica ' e colocando o usermail real, porque no ficheiro de login.php,
a query do usermail e password é um AND, ou seja, ambos os literais têm de ser verdadeiros... ora, ok, ia dar verdadeiro que ele encontrou na base de dados
um utilizador com aquele e-mail (até porque se ele não tivesse encontrado, ia dar erro de DB Error), mas como não existe uma palavra-passe vazia, ou melhor,
a palavra-passe daquele usermail não era vazia, iria dar certamente "erro de password inválida" ou coisa do género.
TL;DR: para ele conseguir dar login com apenas uma pelica, é porque ele terá conseguido mudar a palavra-passe para algo "vazio".

6º 119 O atacante conseguiu entrar na conta de administrador utilizando o usermail real e no campo da password=' OR 1=1
Ok, esta é fácil, vamos lá analisar:
$sql    = "SELECT session FROM tblMembers WHERE username='" . $_POST['usermail'] . "' AND password='" . $_POST['password'] . "';";
Lá está, é um AND, ora ambas as condições têm de ser verdadeiras; já sabemos que existe um usermail igual ao que foi introduzido, até porque ele é público;
relativamente ao campo destinado à palavra-passe, ao colocar pelica ' ele ia estar a "fechar" o campo da procura pela palavra-passe; já deduzimos que
em princípio nunca existiria na base de dados uma palavra-passe associada a um utilizador, sobretudo ao administrador, que fosse vazia, então vamos supor
agora que realmente ele anteriormente não chegou a alterar a palavra-passe para vazio - como a palavra-passe associada a esse utilizador é diferente de vazio,
então ele não conseguiria efetuar login; no entanto, ele colocou à frente uma disjunção e uma condição sempre verdadeira!! Ora, algo OU verdade será sempre verdade, e, por
isso, no final o query retornará algo verdadeiro e, assim, ele consegue aceder à conta de administração.

7º 125 O atacante conseguiu de novo entrar na conta de administrador utilizando o usermail real e no campo da password=' OR 1=1 -- //
Eu diria que sinceramente e neste momento o atacante está apenas a experimentar coisas porque ele já conseguiu entrar na conta anteriormente. Este exemplo
é muito parecido com o anterior, com o acrescento de que ele coloca comentário de forma a reforçar que não haja mais nada no query que possa interferir
de forma que ele deixe de conseguir efetuar login, isto é, que deixe de fazer com que todo o query seja uma proposição verdadeira.

O erro/warning PHP Warning:  preg_replace(): Unknown modifier 'g' in /var/www/html/footer.php on line 21 nos logs de erro está associado às tentativas de login
por parte do atacante, pelo menos os tempos coincidem;

Link stackoverflow interessante: https://stackoverflow.com/questions/19061037/warning-preg-replace-unknown-modifier-g
Basicamente, com o preg_replace() ele por default faz um replace por todas as ocorrências e não apenas, por exemplo, replace na primeira ocorrência que
encontra; ora, não é necessário colocar na expressão regular g -> global flag porque ele já faz isso.
CALMA, que eu não tenho bem a certeza se este g é realmente isso... Porque é que ele iria querer substituir um g anyway??
Não me parece ser um escape.

footer.php
//$query = $_GET;
$query = preg_replace("/[<>]/g", "", $_GET);
$baseurl = $_SERVER['PHP_SELF'];
$baseurl = preg_replace("/[<>()\"]/", "", $baseurl); -> interessante, há 5 aspas aqui, o que faz com que o resto do documento seja interpretado como uma string!!

-----------------------------------------------------------------------------------------------------------------------

Coisa que achei interessante:
if (!isset($_COOKIE['level'])) {
    setcookie("level", "1");
}
if (strpos($_SERVER['HTTP_USER_AGENT'], "sqlmap") !== false ||
strpos($_SERVER['HTTP_USER_AGENT'], "Havij") !== false ||
strpos($_SERVER['HTTP_USER_AGENT'], "Nikto") !== false ||
strpos($_SERVER['HTTP_USER_AGENT'], "requests") !== false ||
strpos($_SERVER['HTTP_USER_AGENT'], "ZAP") !== false ||
strpos($_SERVER['HTTP_USER_AGENT'], "Burp") !== false ||
strpos($_SERVER['HTTP_USER_AGENT'], "Metasploit") !== false ||
strpos($_SERVER['HTTP_USER_AGENT'], "Gecko/20060418 Firefox/1.0.8") !== false) {
    exit;
}

será que ele impede que se faça buscas sobre vulnerabilidades do sistema?? Se assim for, poderá ser um mecanismo de confinamento, porque não permite meios de descoberta de vulnerabilidades e, assim, se elas não são descobertas, não são exploradas, certo??

CONTINUAÇÃO

Ele conseguiu aceder à raiz /
Conseguiu aceder à /products.php?type=1 
''         ''    '' /products.php?type=2
Conseguiu aceder ao /info.php, /blog.php e /downloads
Depois, ele tenta abrir o ficheiro brochure.php: o ficheiro download.php importa o ficheiro getfile.php, e o ficheiro getfile.php é responsável por abrir ficheiros, e era suposto abrir um ficheiro brochure.php, mas este não existe no diretório.
Eu penso que ele estava a tentar verificar se este ficheiro existia para o abrir e descarregar (por causa do "attachment")
Também deu erro no log de erros que fclose() recebeu como parâmetro um booleano 1 em vez de uma resource, ora, isto só confirma aquilo que já sabíamos, ele tentou abrir o ficheiro com o fopen() e como não
conseguiu, a variável de retorno dessa função deu 1 (houve um problema com a função), pelo que fechar esse ficheiro neste caso é "fechar um valor booleano que simboliza que houve um erro".

No Whireshark, ao abrires o GET responsável pelo /download.php?item=brochure.php, ele devolve uma "espécie de div", mas não sei bem para que serve/o que é; mas é engraçado que aparece uma div igual a uma que aparece no header.php.


Eu acho que o footer.php apenas é responsável por mudar os "tipos de moeda" e assim, nota que aquilo tem umas aspas a mais e transforma quase o código todo em string!!

Ora, ele está a tentar criar um ficheiro no servidor de nome x.txt e escrever lá "hello" (eu digo que ele está a tentar escrever
no servidor porquê: porque o servidor neste caso é a nossa VM, e eu diria que ele está a escrever as cenas no servidor e não localmente),
ora, ele ao fazer o GET deste ficheiro dá-lhe erro 404 Not Found, ou seja, eu diria que se o ficheiro não existe foi porque ele
não foi criado!! Ou seja, ele não conseguiu criar / ter permissões para tal!!
Ele tentou várias vezes descarregar este ficheiro mas nunca conseguiu!!

Ele conseguiu fazer download do Brochure.pdf e index.php (apesar de ele não ter grande coisa)
Ele conseguiu aceder ao ficheiro config.php (recorrendo ao download.php) e obteve as credenciais de acesso ao servidor:
<?php
$host = '127.0.0.1';
$user = 'root';
$pass = '1ll-b3-b4ck';
$database = 'oldstore';
?>

Ele consegue aceder ao ficheiro display.php e tenta usá-lo para SQL Injection I guess.

WELL WELL WELL...
No GET /display.php?type=1&lang=php://filter/read=convert.base64-encode/resource=index.php HTTP/1.1" 200 576 "-" "HackToolKit" ele
basicamente encriptou o conteúdo do ficheiro index.php recorrendo ao campo "lang" do php, ou seja, ele através de SQL Injection ele conseguiu
fazer isto (o lang é basicamente o campo que permite mudar o tipo de moeda na página)

192.168.1.118 - - [06/Jan/2021:10:01:15 +0000] "GET /index.php HTTP/1.1" 200 791 "-" "bin
boot
dev
etc
home
initrd.img
initrd.img.old
lib
lib32
lib64
libx32
lost+found
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var
vmlinuz
vmlinuz.old
"

Ora bem, vamos lá com calminha: se fores ver o GET /index.php das 10:00:15, vais ver que no lugar de "HackTollKit" está uma web shell inicializada; 
depois, se fores ver ao whireshark o mesmo GET, vais verificar que no lugar do comando da web shell tens o resultado do comando ls; ora, eu diria
que então o output é o resultado do comando ls que foi passado como parâmetro no cmd=ls e foi passado ao GET[cmd]; além disso, é interessante
notar que também no whireshark no GET /display.php?type=1&lang=/var/log/auth.log&cmd=ls%20 aparecem erros de user inválido e o user é
nada mais nada menos do que o output do ls da máquina!! OMEGUEEEEE










